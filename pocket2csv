#!/usr/bin/bash
#
# pocket2csv
#
# Copyright (c) 2020 Christopher Crawford.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

read -r -d '' LOGO <<'EOF'
...                   _          _    ___                   
                     | |        | |  |__ \                  
  _ __    ___    ___ | | __ ___ | |_    ) | ___  ___ __   __
 | '_ \  / _ \  / __|| |/ // _ \| __|  / / / __|/ __|\ \ / /
 | |_) || (_) || (__ |   <|  __/| |_  / /_| (__ \__ \ \ V / 
 | .__/  \___/  \___||_|\_\\___| \__||____|\___||___/  \_/  
 | |                                                        
 |_|
...   

EOF
echo ""
echo "$LOGO"
echo ""
echo ""
read -p '[1] Enter Your Pocket API Consumer Key: ' CONSUMER_KEY

read -r -d '' MY_DATA <<EOF
{
"consumer_key":"$CONSUMER_KEY",
"redirect_uri":"https://getpocket.com"
}
EOF

MY_CODE=$(\
curl \
  --silent \
  --request POST \
  --url https://getpocket.com/v3/oauth/request \
  --header 'content-type: application/json; charset=UTF-8' \
  --header 'x-accept: application/json' \
  --data "$MY_DATA" \
| jq -r .code)


echo ""
echo "[2] COPY/PASTE THIS LINK TO A BROWSER & AUTHENTICATE:"
echo ""
echo "https://getpocket.com/auth/authorize?request_token=$MY_CODE&redirect_uri=https://getpocket.com"
echo ""
echo "[!] ATTENTION!!! WARNING!!! DANGER!!!"
echo "[!] "
echo "[!] Did you successfully complete that last step [^^^]?"
echo "[!] "
echo "[!] This script will fail, if you did not."
echo "[!] ☠   ☠   ☠"
echo "[!] DO NOT CONTINUE unless successfully authenticated."
echo "[!] "
read -p "[!] Press any key to continue (CTRL-C to quit)... "
echo ""

read -r -d '' MY_DATA <<EOF
{
"consumer_key":"$CONSUMER_KEY",
"code":"$MY_CODE"
}
EOF

MY_ACCESS_TOKEN=$(\
curl \
  --silent \
  --request POST \
  --url https://getpocket.com/v3/oauth/authorize \
  --header 'content-type: application/json; charset=UTF-8' \
  --header 'x-accept: application/json' \
  --data "$MY_DATA" \
| jq -r .access_token)

read -r -d '' MY_DATA <<EOF
{
"state": "all",
"sort": "newest",
"detailType": "complete",
"consumer_key":"$CONSUMER_KEY",
"access_token":"$MY_ACCESS_TOKEN"
}
EOF

echo "[+] Downloading Pocket bookmarks json..."
echo "[+] Writing bookmarks.json	..."

curl \
  --silent \
  --request POST \
  --url https://getpocket.com/v3/get \
  --header 'content-type: application/json' \
  --output bookmarks.json \
  --data "$MY_DATA"

echo "[+] Converting bookmarks.json to csv..."
echo "[+] Writing bookmarks.csv..."

jq '.list | .[]' bookmarks.json \
| jq '{
time_added: .time_added,
favorite: .favorite,
has_video: .has_video,
has_image: .has_image,
word_count: .word_count,
given_title: .given_title,
given_url: .given_url,
resolved_title: .resolved_title,
resolved_url: .resolved_url,
tags: .tags,
excerpt: .excerpt}' \
| jq '
if .tags == null
 then
 .tags = {}
 else
 .tags = .tags 
 end
' \
| jq '.favorite = (.favorite | tonumber)' \
| jq '.has_video = (.has_video | tonumber)' \
| jq '.has_image = (.has_image | tonumber)' \
| jq '.word_count = (.word_count | tonumber)' \
| jq '.time_added = (.time_added | tonumber | todate)' \
| jq '.tags = (.tags | keys)' \
| jq '.tags = (.tags | join(" AND "))' \
| jq '.excerpt = (.excerpt | gsub("[\\n\\t]"; ""))' \
| jq '.given_title = (.given_title | gsub("[\\n\\t]"; ""))' \
| jq 'map(.)' \
| jq -r '@csv' > bookmarks.csv


sed -i '1s/^/'\
'time_added,'\
'favorite,'\
'has_video,'\
'has_image,'\
'word_count,'\
'given_title,'\
'given_url,'\
'resolved_title,'\
'resolved_url,'\
'tags,'\
'excerpt\n/' \
bookmarks.csv

echo "[+] Done."